#Joey Silva
#project 4
#Project Euler Problems 1-6, 8
#Ms. DeRanek
#1/24/2021

#############
##problem 1##
#############
'''
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
'''

# #variable that prints the total sum of the numbers 
# sum=0
# #going between numbers 1-1000
# for number in range(1000):
#     #checks to see if the numbers are divisible by 3 or 5
#     if number % 3 == 0 or number % 5 == 0:
#         #adds the current sum to the current number
#         sum += number
# #prints the final sum
# print (sum)   
# #answer = 233168

#############
##problem 2##
#############
'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

# #assigning variables
# firstNum = 1
# secondNum= 2
# temp = 0
# count = 0
# totalNumber = 4000000
# '''
# I decided to ditch the list idea in favor of a more simple method. I also realized that I should be comparing temp to totalNumber instead
# of the count to total number because the temp variable is always going to be the next number added on
# '''
# #while the 'second number' is less than the total number
# while temp <= totalNumber:
#     #sets the temp variable to the second number
#     temp = secondNum
#     #checks to see if the second number is divisible by 2
#     if temp % 2 == 0:
#         #adds the 'second number' to the counter variable and then makes that variable equal to it
#         count += temp
#     #fibinachi sequence to get to the next number 
#     temp = firstNum + secondNum
#     firstNum = secondNum
#     secondNum = temp
# #prints total sum once done 400000 times
# print (count)
# #answer = 4613732

#############
##problem 3##
#############
'''
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
'''
# number=600851475143
# #specific number when trying to find the prime number
# primeFactor = 1
# #essentially a counter that identifies the largest prime factor of the number 
# counter = 2
# #this will be used to find the largest prime factor 

# while counter <= number:
#     #keeps going until all numbers have been gone through
#     if number %counter == 0:
#         #checks to see if the number is a prime factor of 'number'
#         primeFactor = counter
#         #sets prime factor equal to the counter is  to update the largest prime factor 
#         number /= primeFactor
#         #helpful notation to make number equal to number divided by the value of counter in this
#         #divides the code by the primeFactor to shorten the amount of iterations needed 
#     else:
#         counter =counter+ 1
#         #when number is not prime increase counter 

# print (primeFactor)
# #answer = 6857

# #############
# ##problem 4##
# #############
'''
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
'''
# largestPalendrome= 0
# #keeps track of the largest palendrome saved
# for x in range (100,999):
#     for y in range (100,999):
#         #the problem requires two variables that are three digits, which is why both x and y are present
#         palendrome = x * y
#         if str(palendrome) == str(palendrome)[::-1]:
#             #checks if x*y is a palendrome 
#             if palendrome > largestPalendrome:
#                 #checks to see if the palendrome is the largest one yet
#                 largestPalendrome = palendrome
                
# print (largestPalendrome)
# #answer = 906609

###########
#problem 5#
###########
'''
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
'''

# #helper function checks if a given number is divided between the range 1-20
# def isDivisble(number):
#     #goes through iterations 1-20
#     for i in range(1,21):
#         #when the number is divisble by the given number 
#         if number % i == 0:
#             pass
#         #sets up a given statement where the output is either true or false if the expression is divisble 
#         else:
#             return False
#     return True
# #goes through all possible numbers for this algorithm 
# counter = 1
# #determies when a divisble number is not found
# while isDivisble(counter) == False:
#     #upates counter 
#     counter += 1
# #prints the smallest number that is evenly divisble by all the numbers between 1-20 (will take a while to compute)
# print (counter)
# #answer = 232792560 (takes a very long time)



###########
#problem 6#
###########
'''
The sum of the squares of the first ten natural numbers is 1^2 + 1^2 + ... +10^2 = 385

The square of the sum of the first ten natural numbers is (1^2 + 1^2 + ... +10^2) = 3025

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is .

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
'''
# numbers = []
# numbers.extend(range(1,101))
# #creates a list with values 1-100
# squarednumbers= [number ** 2 for number in numbers]
# #squares the numbers in the list
# SquaredSum = sum(squarednumbers) 
# #adds those numbers together
# SumSquared = sum(numbers) **2
# #adds numbers 1-100 together and then squares it 
# final = SumSquared - SquaredSum
# #finds the difference 
# print(final)
# #answer = 25164150


###########
#problem 8#
###########
'''
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
'''
# number= '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'
#  #this function creates a loop that creates all of the possible adjacent 13 digit numbers in the sequence 
# def loopSeq(Seq):
#     #creates an empty list
#     result = []
#     #while the length of a given sequence is greater than 13
#     while len(Seq) >= 13:
#         #adds the first 13 numbers to the result list
#         result += [Seq[:13]]
#         #sets the sequence equal to itself minus the first first number
#         Seq = Seq[1:]
#     return result
# #this function finds the product of all the possible 13 digit strings. I credit Andy Zhang for helping me understand recursions enough to solve this problem, as well as help me solve the problem. 
# def product(s):
#     #if the length of a given list is 1
#     if len(s) == 1:
#         #makes the answer a string 
#         return int(s)
#     else:
#         #preforms a recursion to get the product of all the numbers in the string (credit Andy Zhang)
#         return int(s[0]) * product(s[1:])
# finalList= []
# for x in loopSeq(number):
#     #puts the products of each sequence into a final sequence to find the max of all of them
#     finalList+= [product(x)]
# #prints the largest product 
# print (max(finalList))
# #answer = 23514624000

