# #Problem 1 (done?)
# count=0
# value=0
# print (count)
# print (value)
# while value < 1000:
#     if value %3 or value%5 ==0:
#         count= count+1
#         value= value+1 
#     else: 
#         value= value+1
# if value == 1000:
#     print(count)
def fibSeq(length):
    firstN = 0
    secondN = 1
    count = 0
    fiblist= []
    while count < length:
       print(firstN)
       temp = firstN + secondN
       firstN = secondN
       secondN = temp
       count += 1
    return fiblist

print (fibSeq(7))

def evenFib(number):
    count= 0
    value= 1
    result=[]
    while count < number:
        if count % 2 !=0:         
            result += [count]
    return result
print (sum(evenFib(42)))



# #Problem 2 (not done)
# totalnumber = 41
# x=0
# y=1
# count = 0

# while count < totalnumber:
#     fiblist=[]
#     fib = x + y
#     fiblist.append(fib)
#     x = fiblist[-1]
#     y = fib
#     count += 1
# print(fiblist)
# #figure out how to use the while loop to add numbers instead of just having a single item in that list 


#############
##problem 3##
#############
# number=600851475143
# #specific number when trying to find the prime number
# primeFactor = 1
# #essentially a counter that identifies the largest prime factor of the number 
# counter = 2
# #this will be used to find the largest prime factor 

# while counter <= number:
#     #keeps going until all numbers have been gone through
#     if number %counter == 0:
#         #checks to see if the number is a prime factor of 'number'
#         primeFactor = counter
#         #sets prime factor equal to the counter is  to update the largest prime factor 
#         number /= primeFactor
#         #helpful notation to make number equal to number divided by the value of counter in this
#         #divides the code by the primeFactor to shorten the amount of iterations needed 
#     else:
#         counter =counter+ 1
#         #when number is not prime increase counter 

# print (primeFactor)




# #############
# ##problem 4##
# #############
# largestPalendrome= 0
# #keeps track of the largest palendrome saved
# for x in range (100,999):
#     for y in range (100,999):
#         #the problem requires two variables that are three digits, which is why both x and y are present
#         palendrome = x * y
#         if str(palendrome) == str(palendrome)[::-1]:
#             #checks if x*y is a palendrome 
#             if palendrome > largestPalendrome:
#                 #checks to see if the palendrome is the largest one yet
#                 largestPalendrome = palendrome
                
# print (largestPalendrome)


#############
##problem 5##
#############
# from math import gcd
# from functools import reduce
# x = 0
# y = 0
# for x in range (1,42):
#     for y in range (1,42):
#         lcm = x*y//gcd(x,y)
# print (lcm)

# #############
# ##problem 6##
# #############
# numbers = []
# numbers.extend(range(1,101))
# #creates a list with values 1-100
# squarednumbers= [number ** 2 for number in numbers]
# #squares the numbers in the list
# SquaredSum = sum(squarednumbers) 
# #adds those numbers together
# SumSquared = sum(numbers) **2
# #adds numbers 1-100 together and then squares it 
# final = SumSquared - SquaredSum
# #finds the difference 
# print(final)
#############
##problem 8##
#############
# number= '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'
# result = []
# for x in range(13):
#     slength = len(number)//13
#     result += str(number)[slength*x:slength*x+slength]
# print(result)
